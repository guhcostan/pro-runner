name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run lint
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
    
    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        directory: ./backend/coverage/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate

  deploy-production:
    name: Deploy to Production
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: prod
    
    steps:
    - name: Update Environment Variables on Render (Production)
      run: |
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "envVars": [
              {"key": "NODE_ENV", "value": "production"},
              {"key": "PORT", "value": "10000"},
              {"key": "SUPABASE_URL", "value": "${{ secrets.SUPABASE_URL }}"},
              {"key": "SUPABASE_ANON_KEY", "value": "${{ secrets.SUPABASE_ANON_KEY }}"},
              {"key": "SUPABASE_SERVICE_ROLE_KEY", "value": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"},
              {"key": "CORS_ORIGIN", "value": "*"}
            ]
          }' \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/env-vars"
    
    - name: Deploy to Render (Production)
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

  deploy-development:
    name: Deploy to Development
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: dev
    
    steps:
    - name: Update Environment Variables on Render (Development)
      run: |
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "envVars": [
              {"key": "NODE_ENV", "value": "development"},
              {"key": "PORT", "value": "10000"},
              {"key": "SUPABASE_URL", "value": "${{ secrets.SUPABASE_URL }}"},
              {"key": "SUPABASE_ANON_KEY", "value": "${{ secrets.SUPABASE_ANON_KEY }}"},
              {"key": "SUPABASE_SERVICE_ROLE_KEY", "value": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"},
              {"key": "CORS_ORIGIN", "value": "*"}
            ]
          }' \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/env-vars"
    
    - name: Deploy to Render (Development)
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

  notify:
    name: Notify Deployment
    needs: [deploy-production, deploy-development]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Production Success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Backend deployed successfully to Production!"
    
    - name: Notify Development Success
      if: needs.deploy-development.result == 'success'
      run: |
        echo "✅ Backend deployed successfully to Development!"
    
    - name: Notify Production Failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        exit 1
    
    - name: Notify Development Failure
      if: needs.deploy-development.result == 'failure'
      run: |
        echo "❌ Development deployment failed!"
        exit 1